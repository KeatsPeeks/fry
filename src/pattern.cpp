
#include "pattern.h"
#include <algorithm>
#include <fstream>
#include <string>


namespace app {

namespace {
    Pattern::TCells toAliveCells(std::vector<std::vector<uint8_t>> table) {
        int height = static_cast<int>(table.size());
        Pattern::TCells cells;
        for (int y = 0; y < height; ++y) {
            const auto& row = table[y];
            int width = static_cast<int>(row.size());
            for (int x = 0; x < width; ++x) {
                if (row[x] == 1) {
                    cells.push_back({x, y});
                }
            }
        }
        return cells;
    }

    Size getSize(Pattern::TCells cells) {
        auto min_max_x = std::minmax_element(cells.begin(), cells.end(), [](auto p1, auto p2) { return p1.x < p2.x; });
        auto min_max_y = std::minmax_element(cells.begin(), cells.end(), [](auto p1, auto p2) { return p1.y < p2.y; });
        return Size{
            min_max_x.second->x - min_max_x.first->x + 1,
            min_max_y.second->y - min_max_y.first->y + 1
        };
    }
} // anonymous namespace

Pattern::Pattern(std::string_view name, TCells aliveCells) : m_name{name}, m_aliveCells{std::move(aliveCells)},
    m_size{getSize(m_aliveCells)} {
}

std::optional<Pattern> loadFromFile(std::string_view name, std::string_view filePath) {
    std::ifstream file{filePath.data()};
    std::string line;
    Pattern::TCells cells;
    for (int y = 0; std::getline(file, line);) {
        if (!line.starts_with('!')) {
            for (int x = 0; auto c : line) {
                if (c == 'O') {
                    cells.push_back({x, y});
                }
                x++;
            }
            y++;
        }
    }
    return cells.empty() ? std::nullopt : std::optional(Pattern{name, cells});
}

Pattern getDefaultPattern() {
    return {
		"Acorn",
		toAliveCells({
			{ 0, 1, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 1, 0, 0, 0 },
			{ 1, 1, 0, 0, 1, 1, 1 },
		})
    };
}

std::vector<Pattern> getDefaultPatterns() {
    return {
		getDefaultPattern(), {
			"R-pentomino",
			toAliveCells({
				{0, 1, 1},
				{1, 1, 0},
				{0, 1, 0},
			})
		}, {
			"Diehard",
			toAliveCells({
				{0, 0, 0, 0, 0, 0, 1, 0},
				{1, 1, 0, 0, 0, 0, 0, 0},
				{0, 1, 0, 0, 0, 1, 1, 1}
			})
		}, {
			"Glider",
			toAliveCells({
			    {1, 1, 1},
			    {1, 0, 0},
			    {0, 1, 0},
			})
		}, {
			"Light spaceship",
			toAliveCells({
				{1, 0, 0, 1, 0},
				{0, 0, 0, 0, 1},
				{1, 0, 0, 0, 1},
				{0, 1, 1, 1, 1},
			})
		}, {
			"Medium spaceship",
			toAliveCells({
				{0, 0, 1, 0, 0, 0},
				{1, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 0, 1},
				{1, 0, 0, 0, 0, 1},
				{0, 1, 1, 1, 1, 1},
			})
		}, {
			"Heavy spaceship",
			toAliveCells({
				{0, 0, 1, 1, 0, 0, 0},
				{1, 0, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 0, 0, 1},
				{1, 0, 0, 0, 0, 0, 1},
				{0, 1, 1, 1, 1, 1, 1},
			})
		}, {
			"Gosper",
			toAliveCells({
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
				{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			})
		}, {
			"Simkin",
			toAliveCells({
				{1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}
			})
		}, {
			"Infinite 1",
			toAliveCells({
				{0, 0, 0, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 1, 0, 1, 1},
				{0, 0, 0, 0, 1, 0, 1, 0},
				{0, 0, 0, 0, 1, 0, 0, 0},
				{0, 0, 1, 0, 0, 0, 0, 0},
				{1, 0, 1, 0, 0, 0, 0, 0},
			})
		}, {
			"Infinite 2",
			toAliveCells({
				{1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0},
				{0, 0, 0, 1, 1},
				{0, 1, 1, 0, 1},
				{1, 0, 1, 0, 1},
			})
		}, {
			"Infinite 3",
			toAliveCells({
				{ 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1 },
			})
		}
    };
}

}  // namespace app